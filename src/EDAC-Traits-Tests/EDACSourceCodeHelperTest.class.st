Class {
	#name : #EDACSourceCodeHelperTest,
	#superclass : #TestCase,
	#traits : 'EDACSourceCodeHelper',
	#classTraits : 'EDACSourceCodeHelper classTrait',
	#category : #'EDAC-Traits-Tests'
}

{ #category : #tests }
EDACSourceCodeHelperTest >> commandFile [
	^ 'command'
]

{ #category : #tests }
EDACSourceCodeHelperTest >> testCommandNameFor [
	self assert: (self commandNameFor: (FileSystem workingDirectory / 'application.created') basename) equals: 'create.application'
]

{ #category : #tests }
EDACSourceCodeHelperTest >> testGenerateSignature [
	| signature expected |
	signature := self generateSignature.
	expected := '	"Generated by ' , self class greaseString , '>>' , thisContext selector , ' at *"' , (String with: Character cr).
	expected := String with: Character cr.
	self assert: (expected match: signature)
]

{ #category : #tests }
EDACSourceCodeHelperTest >> testNormalize [
	self assert: (self normalize: 'SKILL_TYPE') equals: 'skill_type'.
	self assert: (self normalize: '   skill_type  ') equals: 'skill_type'.
	self assert: (self normalize: 'SKILL|type') equals: 'skill_type'.
	self assert: (self normalize: 'Skill+Type') equals: 'skill_type'.
	self assert: (self normalize: '+skill-type$') equals: '_skill_type_'
]

{ #category : #tests }
EDACSourceCodeHelperTest >> testToCamelCase [
	self assert: (self toCamelCase: 'SKILL_TYPE') equals: 'SkillType'.
	self assert: (self toCamelCase: 'skill_type') equals: 'SkillType'.
	self assert: (self toCamelCase: 'SKILL type') equals: 'SKILLType'.
	self assert: (self toCamelCase: 'SkillType') equals: 'SkillType'.
	self assert: (self toCamelCase: 'ROUND') equals: 'Round'
]

{ #category : #tests }
EDACSourceCodeHelperTest >> testVerbInPresentTense [
	self assert: (self verbInPresentTense: 'created') equals: 'create'
]
